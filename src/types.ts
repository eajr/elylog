export enum LogType {
  SYSTEM = "SYS",
  METADATA = "META",
  INFO = "INFO",
  WARNING = "WARN",
  ERROR = "ERR",
}

export type LogBase = {
  timestamp: Date;
  type: LogType;
  uuid: string;
};

export type LogRequest = LogBase & {
  method: string;
  path: string;
};

export type LogMessage = LogBase & {
  data: object;
};

export type LogMetaData = LogBase & {
  duration: number;
};

export interface ILoggerFn {
  (type: LogType, data: object): void;
}

export interface ILogger {
  log: ILoggerFn;
}

export interface IOptions {
  // Elylog generates a request ID (uuidv4) by default on request.
  // Set this to a header to use request id's generated by client
  // Default: null
  headerForRequestId?: string;

  // Log all requests (SYS log type): true (default)
  logRequests?: boolean;

  // Log metadata at the end of life cycle (META log type): true (default)
  // Metadata:
  //   - Duration (in ms)
  logMetaData?: boolean;

  // Custom print function for request logs (SYS log type): JSON (default)
  requestPrintFn?(log: LogRequest): void;

  // Custom print function for log messages (INFO|WARNING|ERROR): JSON (default)
  logPrintFn?(log: LogMessage): void;

  // Custom print function for metadata messages (META): JSON (default)
  metadataPrintFn?(log: LogMetaData): void;
}
