import { Elysia, type Context } from "elysia";
import { randomUUID } from "node:crypto";

export enum LogType {
  SYSTEM = "SYS",
  METADATA = "META",
  INFO = "INFO",
  WARNING = "WARN",
  ERROR = "ERR",
}

type LogBase = {
  timestamp: Date;
  type: LogType;
  uuid: string;
};

export type LogRequest = LogBase & {
  method: string;
  path: string;
};

export type LogMessage = LogBase & {
  message: string;
};

export type LogMetaData = LogBase & {
  duration: number;
};

export interface Options {
  // Elylog generates a request ID (uuidv4) by default on request.
  // Set this to a header to use request id's generated by client
  // Default: null
  headerForRequestId?: string;

  // Log all requests (SYS log type): true (default)
  logRequests?: boolean;

  // Log metadata at the end of life cycle (META log type): true (default)
  // Metadata:
  //   - Duration (in ms)
  logMetaData?: boolean;

  // Custom print function for request logs (SYS log type): JSON (default)
  requestPrintFn?(log: LogRequest): void;

  // Custom print function for log messages (INFO|WARNING|ERROR): JSON (default)
  logPrintFn?(log: LogMessage): void;

  // Custom print function for metadata messages (META): JSON (default)
  metadataPrintFn?(log: LogMetaData): void;
}

const defaultOptions: Options = {
  headerForRequestId: undefined,
  logRequests: true,
  logMetaData: true,
  requestPrintFn: (log: LogRequest) => {
    console.log(JSON.stringify(log));
  },
  logPrintFn: (log: LogMessage) => {
    switch (log.type) {
      case LogType.INFO:
        return console.log(JSON.stringify(log));
      case LogType.WARNING:
        return console.warn(JSON.stringify(log));
      case LogType.ERROR:
        return console.error(JSON.stringify(log));
    }
  },
  metadataPrintFn: (log: LogMetaData) => {
    console.log(JSON.stringify(log));
  },
};

// Main plugin
export const elylog = (options?: Options) => {
  if (options === undefined) options = defaultOptions;
  else options = { ...defaultOptions, ...options };

  return new Elysia({
    name: "@eajr/elylog",
  })
    .derive((ctx) => {
      const raw = (type: LogType, message: string) => {
        let log: LogMessage = {
          timestamp: new Date(),
          type: type,
          uuid: (ctx.store as any).elylogRequestId,
          message: message,
        };
        options?.logPrintFn?.(log);
      };
      return {
        log: {
          info: (message: string) => {
            raw(LogType.INFO, message);
          },
          warn: (message: string) => {
            raw(LogType.WARNING, message);
          },
          error: (message: string) => {
            raw(LogType.ERROR, message);
          },
        },
      };
    })
    .onRequest((ctx) => {
      let reqId: string | null = null;
      if (options?.headerForRequestId !== undefined)
        reqId = ctx.request.headers.get(options?.headerForRequestId);

      if (reqId === null) reqId = randomUUID();

      ctx.store = {
        ...ctx.store,
        elylogRequestStart: process.hrtime.bigint(),
        elylogRequestId: reqId,
      };
    })
    .onBeforeHandle((ctx) => {
      if (options?.logRequests) {
        const log: LogRequest = {
          timestamp: new Date(),
          type: LogType.SYSTEM,
          uuid: (ctx.store as any).elylogRequestId,
          method: ctx.request.method,
          path: ctx.path,
        };

        options?.requestPrintFn?.(log);
      }
    })
    .onResponse(onResponse(options))
    .onError((ctx) => {});
};

const onResponse = (options: Options) => {
  return (ctx: Context) => {
    if (options?.logMetaData) {
      const reqStart = (ctx.store as any).elylogRequestStart;
      const reqEnd = process.hrtime.bigint();

      const log: LogMetaData = {
        timestamp: new Date(),
        type: LogType.METADATA,
        uuid: (ctx.store as any).elylogRequestId,
        duration: Number(durationToMilliseconds(reqStart, reqEnd)),
      };

      options?.metadataPrintFn?.(log);
    }
  };
};

function durationToMilliseconds(start: bigint, end: bigint) {
  return (end - start) / BigInt(1000000);
}
